const express = require("express");
const router = express.Router();
const db = require("../config/dbConfig");

// Configuration des num√©ros rouges selon les r√®gles standard de la roulette europ√©enne
// Cette constante d√©termine la couleur de chaque num√©ro pour les calculs de gains sur les paris couleur
const RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];

/**
 * D√©termine la couleur d'un num√©ro selon les r√®gles de la roulette europ√©enne.
 * Cette fonction est utilis√©e pour valider les paris sur rouge/noir lors du calcul des gains.
 */
function getNumberColor(number) {
    if (number === 0) return 'green';
    return RED_NUMBERS.includes(number) ? 'red' : 'black';
}

/**
 * Fonction principale de calcul des gains et pertes pour un spin de roulette.
 * Cette logique m√©tier centralise tous les calculs et met √† jour directement la base de donn√©es.
 */
async function win(winningSpin, bets, solde, userId, winValue = 0, payout = 0, betTotal = 0) {
    // Logs d'initialisation pour tracer le d√©but de chaque calcul de gains
    // Ces console.log permettent de suivre pr√©cis√©ment chaque session de jeu et d'identifier les probl√®mes
    // console.log(`[WIN CALCULATION] üé∞ D√©but du calcul des gains pour l'utilisateur ${userId}`);
    // console.log(`[WIN CALCULATION] Num√©ro gagnant: ${winningSpin}, Solde initial: ${solde}`);
    // console.log(`[WIN CALCULATION] Nombre de mises: ${bets.length}`);
    
    let newsolde = solde;
    let betLose = 0;
    const winColor = getNumberColor(winningSpin);
    const isEven = winningSpin !== 0 && winningSpin % 2 === 0;
    
    // D√©finition des colonnes pour les paris '2 √† 1' selon la disposition du plateau
    // Ces tableaux permettent de v√©rifier si un num√©ro appartient √† une colonne sp√©cifique
    const firstColumn = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34];
    const secondColumn = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35];
    const thirdColumn = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36];
    
    // Boucle de traitement de chaque mise pour d√©terminer les gains ou pertes
    // Chaque pari est √©valu√© individuellement selon ses propres r√®gles de gain
    for (let b of bets) {
        const numArray = b.numbers.split(',').map(Number);
        let isWin = false;
        
        // V√©rification directe si le num√©ro gagnant fait partie des num√©ros mis√©s
        // Cette condition couvre les mises pleines, √† cheval, carr√©s, transversales, etc.
        if (numArray.includes(winningSpin)) {
            isWin = true;
        } 
        // √âvaluation des paris sp√©ciaux bas√©s sur les propri√©t√©s du num√©ro (couleur, parit√©, plage)
        // Ces conditions g√®rent tous les paris externes comme rouge/noir, pair/impair, douzaines, etc.
        else if (b.label) {
            if (b.label === 'RED' && winColor === 'red') {isWin = true;}
            else if (b.label === 'BLACK' && winColor === 'black') {isWin = true;}
            else if (b.label === 'EVEN' && isEven) {isWin = true;}
            else if (b.label === 'ODD' && !isEven && winningSpin !== 0) {isWin = true;}
            else if (b.label === '1 √† 18' && winningSpin >= 1 && winningSpin <= 18) {isWin = true;}
            else if (b.label === '19 √† 36' && winningSpin >= 19 && winningSpin <= 36) {isWin = true;}
            else if (b.label === '1 √† 12' && winningSpin >= 1 && winningSpin <= 12) {isWin = true;}
            else if (b.label === '13 √† 24' && winningSpin >= 13 && winningSpin <= 24) {isWin = true;}
            else if (b.label === '25 √† 36' && winningSpin >= 25 && winningSpin <= 36) {isWin = true;}
            // Traitement sp√©cial des colonnes qui n√©cessite une v√©rification d'appartenance
            // Les colonnes sont plus complexes car elles ne suivent pas une s√©quence num√©rique simple
            else if (b.label === '2 √† 1' && b.type === 'outside_column') {
                // Double v√©rification d√©fensive pour les paris de colonnes :
                // 1. firstColumn.includes(winningSpin) : Le num√©ro gagnant est-il dans cette colonne ?
                // 2. numArray.every(n => firstColumn.includes(n)) : Le pari porte-t-il vraiment sur cette colonne ?
                // Note: Logiquement, si (1) est false, (2) ne sera pas √©valu√© gr√¢ce au court-circuit (&&)
                // Cette double v√©rification prot√®ge contre les donn√©es corrompues et valide l'int√©grit√© du pari
                if (firstColumn.includes(winningSpin) && numArray.every(n => firstColumn.includes(n))) {isWin = true;
                    console.log(`firstColumn : [ROULETTE WIN] üí∞ Mise gagnante: ${b.label} - Mise: ${b.amt}, Gain: ${b.odds * b.amt}`);
                }
                else if (secondColumn.includes(winningSpin) && numArray.every(n => secondColumn.includes(n))) {isWin = true;
                    console.log(`secondColumn : [ROULETTE WIN] üí∞ Mise gagnante: ${b.label} - Mise: ${b.amt}, Gain: ${b.odds * b.amt}`);
                } 
                else if (thirdColumn.includes(winningSpin) && numArray.every(n => thirdColumn.includes(n))) {isWin = true;
                    console.log(`thirdColumn : [ROULETTE WIN] üí∞ Mise gagnante: ${b.label} - Mise: ${b.amt}, Gain: ${b.odds * b.amt}`);
                }
            }
        }
        
        // Calcul et logging des gains ou pertes pour chaque mise
        // Les logs d√©taill√©s permettent de v√©rifier la justesse de chaque calcul
        if (isWin) {
            const gain = b.odds * b.amt;
            winValue += gain;
            // console.log(`[WIN CALCULATION] ‚úÖ Mise gagnante: ${b.label || b.numbers} - Mise: ${b.amt}, Gain: ${gain}`);
        }else{
            betLose += b.amt;
            // console.log(`[WIN CALCULATION] ‚ùå Mise perdante: ${b.label || b.numbers} - Mise perdue: ${b.amt}`);
        }
        betTotal += b.amt;
    }
    
    // Calcul final du r√©sultat net et du nouveau solde
    // Le payout repr√©sente le gain net (gains - pertes) qui s'ajoute au solde initial
    payout = winValue - betLose;
    newsolde += payout;
    
    // Logs de r√©sum√© pour v√©rifier la coh√©rence des calculs
    // Ces informations permettent de valider que tous les montants sont corrects
    // console.log(`[WIN CALCULATION] üìä R√©sum√© des gains:`);
    // console.log(`[WIN CALCULATION] - Total des gains: ${winValue}`);
    // console.log(`[WIN CALCULATION] - Total des pertes: ${betLose}`);
    // console.log(`[WIN CALCULATION] - Total des mises: ${betTotal}`);
    // console.log(`[WIN CALCULATION] - Payout net: ${payout}`);
    // console.log(`[WIN CALCULATION] - Nouveau solde calcul√©: ${solde} ‚Üí ${newsolde}`);
    
    // Mise √† jour imm√©diate du solde en base de donn√©es pour persistance
    // Cette op√©ration garantit que le nouveau solde est sauvegard√© m√™me en cas de d√©connexion
    if (userId) {
        try {
            console.log(`[WIN CALCULATION] üîÑ Mise √† jour du solde en base de donn√©es...`);
            await db.query(
                "UPDATE user SET solde = ? WHERE user_id = ?",
                [newsolde, userId]
            );
            console.log(`[WIN CALCULATION] ‚úÖ Solde mis √† jour en base de donn√©es pour l'utilisateur ${userId}: ${newsolde}`);
        } catch (err) {
            console.error(`[WIN CALCULATION] ‚ùå Erreur lors de la mise √† jour du solde en base:`, err);
            throw err; // Re-throw the error so it can be caught by the calling route
        }
    }
    
    // Retour des r√©sultats structur√©s pour le frontend
    // Ces valeurs permettent au client d'afficher les r√©sultats et de mettre √† jour l'interface
    return { 
        winValue: winValue, 
        payout: payout,
        newsolde: newsolde,
        betTotal: betTotal
    };
}

/**
 * Endpoint pour g√©n√©rer un num√©ro al√©atoire de roulette (0-36).
 * Cette route simule le lancement de la roulette avec un g√©n√©rateur de nombres al√©atoires c√¥t√© serveur.
 */
router.post('/spin', (req, res) => {
    const number = Math.floor(Math.random() * 37); // 0-36
    const color = getNumberColor(number);
    
    res.json({ number, color });
});

/**
 * Endpoint principal pour calculer les gains d'un spin de roulette.
 * Cette route re√ßoit les mises du frontend, v√©rifie la coh√©rence du solde et calcule les gains.
 */
router.post('/win', async (req, res) => {
    const { winningSpin, bets, solde } = req.body;
    const userId = req.body.userId;
    
    // Logs d'entr√©e pour tracer chaque demande de calcul de gains
    // Ces informations permettent de diagnostiquer les probl√®mes de communication frontend/backend
    // console.log(`[ROULETTE WIN] üéØ Nouvelle demande de calcul de gains`);
    // console.log(`[ROULETTE WIN] UserId: ${userId}, Num√©ro gagnant: ${winningSpin}, Solde re√ßu du frontend: ${solde}`);
    
    // V√©rification de coh√©rence entre le solde frontend et la base de donn√©es
    // Cette double v√©rification permet de d√©tecter les d√©synchronisations et probl√®mes de cache
    if (userId) {
        try {
            const [rows] = await db.query("SELECT solde FROM user WHERE user_id = ?", [userId]);
            if (rows.length > 0) {
                const soldeReel = rows[0].solde;
                console.log(`[ROULETTE WIN] üí∞ Solde r√©el en base de donn√©es: ${soldeReel}`);
                console.log(`[ROULETTE WIN] ‚ö†Ô∏è Diff√©rence: Frontend(${solde}) vs Base(${soldeReel}) = ${solde - soldeReel}`);    
            }
        } catch (err) {
            console.log(`[ROULETTE WIN] ‚ùå Erreur lors de la v√©rification du solde en base:`, err);
        }
    }
    
    // Validation des donn√©es d'entr√©e pour √©viter les erreurs de calcul
    // Ces v√©rifications garantissent que tous les param√®tres n√©cessaires sont pr√©sents et valides
    if (winningSpin === undefined || !Array.isArray(bets) || solde === undefined) {
        // console.log(`[ROULETTE WIN] ‚ùå Donn√©es invalides re√ßues`);
        return res.status(400).json({ 
            message: "Donn√©es invalides. Veuillez fournir un num√©ro gagnant, des mises et la valeur de la banque." 
        });
    }
    
    try {
        // Appel de la fonction de calcul avec logging du r√©sultat pour suivi
        // Cette √©tape centralise toute la logique de jeu et retourne les r√©sultats structur√©s
        const result = await win(winningSpin, bets, solde, userId, 0, 0, 0);
        
        // console.log(`[ROULETTE WIN] ‚úÖ Calcul termin√©, envoi de la r√©ponse:`, result);
        res.json(result);
    } catch (error) {
        // Gestion d'erreur avec logging d√©taill√© pour faciliter le d√©bogage
        // Ces informations sont cruciales pour identifier les probl√®mes de logique ou de base de donn√©es
        console.error(`[ROULETTE WIN] ‚ùå Erreur lors du calcul des gains:`, error);
        res.status(500).json({ 
            message: "Erreur lors du calcul des gains" 
        });
    }
});

module.exports = router;