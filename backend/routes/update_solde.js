const express = require("express");
const { verifyToken } = require("../middlewares/auth");
const db = require("../config/dbConfig");
const router = express.Router();

/**
 * Route API pour mettre √† jour le solde d'un utilisateur de mani√®re s√©curis√©e.
 * Cette route utilise l'authentification par token et valide les donn√©es avant modification en base.
 */
router.post("/update", verifyToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { newSolde } = req.body;

    // Logs d'information pour tracer les demandes de mise √† jour de solde
    // Ces console.log permettent de diagnostiquer les probl√®mes de synchronisation entre frontend et backend
    // Ce console.log() sert au fichier test
    // console.log(`[SOLDE UPDATE] üéØ Demande de mise √† jour du solde pour l'utilisateur ${userId}`);
    // Ce console.log() sert au fichier test
    // console.log(`[SOLDE UPDATE] Nouveau solde demand√©: ${newSolde}`);

    if (!userId) {
      // Ce console.log() sert au fichier test
      // console.log(`[SOLDE UPDATE] Erreur: Utilisateur non trouv√©`);
      return res.status(404).json({ error: "Utilisateur non trouv√©" });
    }

    // Validation rigoureuse du montant pour √©viter les erreurs de base de donn√©es
    // Cette v√©rification emp√™che l'insertion de valeurs non num√©riques ou infinies
    if (isNaN(newSolde) || !isFinite(newSolde)) {
      // Ce console.log() sert au fichier test
      // console.log(`[SOLDE UPDATE] Erreur: Valeur de solde invalide - ${newSolde}`);
      return res.status(400).json({ error: "Valeur de solde invalide" });
    }

    // R√©cup√©ration de l'ancien solde pour comparaison et audit des modifications
    // Cette √©tape permet de tracer l'√©volution du solde pour le d√©bogage
    const [oldSoldeResult] = await db.query(
      "SELECT solde FROM user WHERE user_id = ?",
      [userId]
    );
    
    const oldSolde = oldSoldeResult.length > 0 ? oldSoldeResult[0].solde : 'inconnu';
    // Ce console.log() sert au fichier test
    // console.log(`[SOLDE UPDATE] Ancien solde de l'utilisateur ${userId}: ${oldSolde}`);

    // Ex√©cution de la mise √† jour avec logging du r√©sultat pour v√©rification
    // Les logs confirment que l'op√©ration a bien affect√© une ligne en base de donn√©es
    const [result] = await db.query(
        "UPDATE user SET solde = ? WHERE user_id = ?",
      [newSolde, userId]
    );

    // Ce console.log() sert au fichier test
    // console.log(`[SOLDE UPDATE] Requ√™te UPDATE ex√©cut√©e - Lignes affect√©es: ${result.affectedRows}`);
    // Ce console.log() sert au fichier test
    // console.log(`[SOLDE UPDATE] ‚úÖ Solde mis √† jour avec succ√®s pour l'utilisateur ${userId}: ${oldSolde} ‚Üí ${newSolde}`);
    
    res.json({ success: true, message: "Solde mis √† jour avec succ√®s" });
  } 
  catch (err) {
    // Log d'erreur d√©taill√© pour faciliter le d√©bogage en cas de probl√®me
    // Ces informations sont cruciales pour identifier les erreurs de base de donn√©es ou de r√©seau
    // Ce console.log() sert au fichier test
    // console.error(`[SOLDE UPDATE] ‚ùå Erreur lors de la mise √† jour du solde:`, err);
    res.status(500).json({ error: "Erreur serveur" });
}
});

module.exports = router;
