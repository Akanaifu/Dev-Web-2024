import { Injectable, inject } from '@angular/core';
import { IBettingBoardCell } from '../../interfaces/betting-board.interface';
import { IUser } from '../../interfaces/users.interface';
import { IRouletteResult } from '../../interfaces/roulette-net-resultat.interface';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';

/**
 * SERVICE DE LOGIQUE M√âTIER POUR LE JEU DE ROULETTE EN LIGNE
 * 
 * RESPONSABILIT√âS PRINCIPALES :
 * - Gestion compl√®te des mises et calcul des gains selon les r√®gles de la roulette europ√©enne
 * - Communication s√©curis√©e avec l'API backend pour les op√©rations critiques
 * - Synchronisation intelligente du solde utilisateur (√©vite le double d√©bit)
 * - Gestion d'√©tat du jeu (spinning, mises actives, historique)
 * 
 * ARCHITECTURE DE SOLDE ANTI-DOUBLE-D√âBIT :
 * Le probl√®me : Sans cette architecture, le solde pourrait √™tre d√©bit√© deux fois :
 * 1. Une fois visuellement dans le frontend (UX imm√©diate)
 * 2. Une fois par le backend lors du calcul des gains
 * 
 * La solution impl√©ment√©e :
 * - _originalSolde : Solde r√©el non modifi√©, utilis√© pour les calculs backend
 * - currentUser.solde : Solde affich√© avec mises d√©bit√©es visuellement pour l'UX
 * - √Ä chaque spin : le backend re√ßoit _originalSolde, calcule les gains/pertes, retourne le nouveau solde
 * - Les deux valeurs sont synchronis√©es avec le r√©sultat du backend
 * 
 * PATTERN D'ENCAPSULATION :
 * - Propri√©t√©s priv√©es avec getters/setters pour contr√¥ler l'acc√®s et la validation
 * - S√©paration claire entre donn√©es d'affichage et logique m√©tier
 * - Validation automatique des valeurs (ex: currentBet toujours >= 0)
 */
@Injectable({ providedIn: 'root' })
export class RouletteNetLogic {
  private http = inject(HttpClient);
  private BASE_URL = 'http://localhost:3000';
  
  // ===== PROPRI√âT√âS PRIV√âES ENCAPSUL√âES =====
  // L'encapsulation permet un contr√¥le strict de l'√©tat et une validation automatique
  
  /** Donn√©es de l'utilisateur connect√© (undefined si non connect√©) */
  private _currentUser?: IUser;
  
  /** √âtat de rotation de la roulette (bloque les interactions pendant le spin) */
  private _isSpinning = false;
  
  /** Montant total des mises en cours (toujours >= 0 gr√¢ce au setter) */
  private _currentBet = 0;
  
  /** Valeur de la mise s√©lectionn√©e (minimum 1 gr√¢ce au setter) */
  private _wager = 5;
  
  /** Index du jeton s√©lectionn√© (valid√© dans les limites du tableau) */
  private _selectedChipIndex = 1;
  
  /** 
   * Solde r√©el avant d√©bits visuels - CL√â DE L'ARCHITECTURE ANTI-DOUBLE-D√âBIT
   * Cette valeur reste synchronis√©e avec la base de donn√©es et est utilis√©e
   * pour tous les calculs backend, √©vitant ainsi le double d√©bit du solde
   */
  private _originalSolde = 0;
  
  // ===== GETTERS/SETTERS AVEC VALIDATION AUTOMATIQUE =====
  // Ces accesseurs garantissent la coh√©rence des donn√©es et appliquent les r√®gles m√©tier
  
  /** 
   * ACC√àS CONTR√îL√â AUX DONN√âES UTILISATEUR
   * Centralise l'acc√®s aux informations de l'utilisateur connect√©
   */
  get currentUser(): IUser | undefined {
    return this._currentUser;
  }
  
  set currentUser(user: IUser | undefined) {
    this._currentUser = user;
  }
  
  /** 
   * √âTAT DE ROTATION DE LA ROULETTE
   * Contr√¥le l'activation/d√©sactivation des interactions utilisateur
   */
  get isSpinning(): boolean {
    return this._isSpinning;
  }
  
  set isSpinning(value: boolean) {
    this._isSpinning = value;
  }
  
  /** 
   * MONTANT TOTAL DES MISES EN COURS
   * Validation automatique : toujours positif ou nul
   */
  get currentBet(): number {
    return this._currentBet;
  }
  
  set currentBet(value: number) {
    this._currentBet = Math.max(0, value); // Garantit une valeur >= 0
  }
  
  /** 
   * VALEUR DE LA MISE S√âLECTIONN√âE
   * Validation automatique : minimum 1 pour √©viter les mises nulles
   */
  get wager(): number {
    return this._wager;
  }
  
  set wager(value: number) {
    this._wager = Math.max(1, value); // Garantit une valeur >= 1
  }
  
  /** 
   * INDEX DU JETON S√âLECTIONN√â
   * Validation automatique : doit √™tre dans les limites du tableau chipValues
   */
  get selectedChipIndex(): number {
    return this._selectedChipIndex;
  }
  
  set selectedChipIndex(index: number) {
    if (index >= 0 && index < this.chipValues.length) {
      this._selectedChipIndex = index;
    }
  }
  
  // ===== CONFIGURATION DU JEU (CONSTANTES M√âTIER) =====
  
  /** 
   * VALEURS DES JETONS DISPONIBLES POUR LES MISES
   * Progression classique des casinos : 1, 5, 10, 100 + option 'clear' pour tout effacer
   */
  chipValues = [1, 5, 10, 100, 'clear'];
  
  /** 
   * COULEURS CSS CORRESPONDANT AUX JETONS
   * Mapping 1:1 avec chipValues pour l'affichage visuel coh√©rent
   */
  chipColors = ['red', 'blue', 'orange', 'gold', 'clearBet'];
  
  /** Derni√®re mise effectu√©e (pour l'historique et les statistiques) */
  lastWager = 0;

  /** 
   * TABLEAU DES MISES ACTIVES AVEC LEURS D√âTAILS COMPLETS
   * Chaque mise contient : label (affichage), numbers (num√©ros couverts), 
   * type (cat√©gorie), odds (cote), amt (montant mis√©)
   */
  bet: { label: string; numbers: string; type: string; odds: number; amt: number }[] = [];
  
  /** 
   * NUM√âROS SUR LESQUELS DES MISES SONT PLAC√âES
   * Utilis√© pour l'affichage visuel et les v√©rifications rapides
   */
  numbersBet: number[] = [];
  
  /** 
   * HISTORIQUE DES 10 DERNIERS NUM√âROS SORTIS
   * Permet aux joueurs de suivre les tendances (bien que chaque spin soit ind√©pendant)
   */
  previousNumbers: number[] = [];

  /** 
   * NUM√âROS ROUGES SELON LES R√àGLES DE LA ROULETTE EUROP√âENNE
   * Configuration standard : 18 num√©ros rouges, 18 noirs, 1 vert (0)
   */
  numRed = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
  
  /** 
   * DISPOSITION PHYSIQUE DES NUM√âROS SUR LA ROUE EUROP√âENNE
   * Ordre exact des num√©ros sur une vraie roulette europ√©enne (37 cases)
   * Utilis√© pour l'animation r√©aliste de la bille
   */
  wheelnumbersAC = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34,
    6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 
    1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];

  /**
   * CONSTRUCTEUR - INITIALISATION DU SERVICE
   * 
   * Configure l'√©tat initial du jeu et r√©cup√®re les donn√©es utilisateur.
   * Utilise des valeurs par d√©faut s√©curis√©es pour √©viter les erreurs.
   */
  constructor() {
    this.fetchIUser();           // R√©cup√©ration asynchrone des donn√©es utilisateur
    this.selectedChipIndex = 1;  // Jeton de 5 par d√©faut (index 1)
    this.wager = 5;              // Mise par d√©faut de 5
    this.currentBet = 0;         // Aucune mise au d√©marrage
    this.isSpinning = false;     // Roulette √† l'arr√™t
  }

  /**
   * R√âCUP√âRATION DES INFORMATIONS UTILISATEUR DEPUIS L'API
   * 
   * Charge les donn√©es de l'utilisateur connect√© et initialise le solde original.
   * Cette m√©thode est cruciale pour l'architecture anti-double-d√©bit.
   * 
   * S√âCURIT√â :
   * - Utilise withCredentials pour l'authentification par cookies
   * - Gestion d'erreur robuste pour √©viter les crashes
   * - Initialisation de _originalSolde avec le solde r√©el de la base
   */
  fetchIUser() {
    this.http.get<IUser>(`${this.BASE_URL}/get_id/info`, { withCredentials: true })
      .subscribe({
        next: (userData) => {
          this.currentUser = userData; 
          this._originalSolde = userData.solde; // CRUCIAL : synchronisation du solde r√©el
          console.log('üë§ Utilisateur charg√©:', userData.username, 'Solde:', userData.solde);
        },
        error: (error) => {
          console.error('‚ùå Erreur r√©cup√©ration utilisateur:', error);
        }
      });
  }

  /**
   * REMISE √Ä Z√âRO COMPL√àTE DU JEU
   * 
   * Remet le jeu dans son √©tat initial pour une nouvelle session.
   * Synchronise le solde affich√© avec le solde original (annule les d√©bits visuels).
   * 
   * UTILISATION :
   * - Bouton "Reset" dans l'interface
   * - Apr√®s une d√©connexion/reconnexion
   * - En cas d'erreur n√©cessitant une r√©initialisation
   */
  resetGame() {
    this.currentBet = 0;         // Efface le total des mises
    this.wager = 5;              // Remet la mise par d√©faut
    this.bet = [];               // Vide toutes les mises
    this.numbersBet = [];        // Efface les num√©ros mis√©s
    this.previousNumbers = [];   // Efface l'historique
    
    // SYNCHRONISATION CRUCIALE : remet le solde affich√© = solde r√©el
    if (this.currentUser) {
      this.currentUser.solde = this._originalSolde;
      console.log('üîÑ Jeu remis √† z√©ro, solde restaur√©:', this._originalSolde);
    }
  }

  /**
   * EFFACEMENT DES MISES SANS AFFECTER LE SOLDE
   * 
   * Supprime toutes les mises mais conserve l'√©tat du solde.
   * Utilis√© pour nettoyer le plateau sans r√©initialiser compl√®tement.
   */
  clearBet() {
    this.bet = [];
    this.numbersBet = [];
    console.log('üßπ Mises effac√©es');
  }

  /**
   * REMISE √Ä Z√âRO DE L'√âTAT DES MISES APR√àS UN SPIN
   * 
   * M√©thode appel√©e apr√®s chaque spin pour pr√©parer le tour suivant.
   * Synchronise _originalSolde avec le nouveau solde calcul√© par le backend.
   * 
   * ARCHITECTURE ANTI-DOUBLE-D√âBIT :
   * Cette m√©thode est essentielle car elle met √† jour _originalSolde avec le r√©sultat
   * du backend, garantissant que le prochain pari utilisera le bon solde de r√©f√©rence.
   */
  resetBettingState() {
    this.currentBet = 0;
    this.bet = [];
    this.numbersBet = [];
    
    // SYNCHRONISATION CRUCIALE : _originalSolde = nouveau solde calcul√©
    if (this.currentUser) {
      this._originalSolde = this.currentUser.solde;
      console.log('üîÑ √âtat des mises r√©initialis√©, nouveau solde de r√©f√©rence:', this._originalSolde);
    }
  }

  /**
   * SUPPRESSION D'UNE MISE SP√âCIFIQUE
   * 
   * Retire une mise du plateau et recr√©dite visuellement le montant au solde.
   * Permet aux joueurs de corriger leurs erreurs avant le spin.
   * 
   * LOGIQUE DE SUPPRESSION :
   * 1. Trouve la mise correspondante dans le tableau
   * 2. Soustrait le montant de la mise (ou la valeur du wager si plus petite)
   * 3. Recr√©dite visuellement le montant au solde affich√©
   * 4. Supprime les mises √† montant z√©ro
   * 
   * @param cell Cellule du plateau contenant la mise √† supprimer
   */
  removeBet(cell: IBettingBoardCell) {
    if (!this.currentUser || !cell?.numbers) return;
    
    // S√©curit√© : s'assurer qu'on a une valeur de wager valide
    this.wager = this.wager === 0 ? 100 : this.wager; 
    const numbers = cell.numbers.join(', ');
    const type = cell.type;
    
    // Recherche et modification de la mise correspondante
    for (let bet of this.bet) {
      if (bet.numbers === numbers && bet.type === type && bet.amt > 0) {
        // Calcul du montant √† retirer (minimum entre wager et montant de la mise)
        this.wager = bet.amt > this.wager ? this.wager : bet.amt; 
        bet.amt -= this.wager;
        
        // Recr√©diter visuellement le montant (UX imm√©diate)
        this.currentUser.solde += this.wager;
        this.currentBet -= this.wager; 
        
        console.log(`‚ûñ Mise retir√©e: ${this.wager} sur ${cell.label || numbers}`);
      }
    }
    
    // Nettoyage : supprimer les mises √† montant z√©ro
    this.bet = this.bet.filter(b => b.amt > 0);
  }

  /**
   * LANCEMENT DE LA ROULETTE VIA L'API BACKEND
   * 
   * Effectue un appel API pour obtenir un num√©ro al√©atoire selon les r√®gles de la roulette europ√©enne.
   * Cette m√©thode utilise fetch() pour une gestion d'erreur plus fine que HttpClient.
   * 
   * S√âCURIT√â :
   * - Validation de la r√©ponse HTTP (response.ok)
   * - Gestion d'erreur avec messages explicites
   * - Transmission de l'userId pour l'audit et les statistiques
   * 
   * @returns Promise<IRouletteResult> Num√©ro gagnant (0-36) et sa couleur
   */
  async spin(): Promise<IRouletteResult> {
    try {
        const userId = this.currentUser?.user_id;
        
        console.log('üé∞ Lancement de la roulette pour l\'utilisateur:', userId);
        
        const response = await fetch('/api/roulette/spin', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        });

        if (!response.ok) {
            throw new Error(`√âchec du lancement de la roulette: ${response.status} ${response.statusText}`);
        }

        const result = await response.json() as IRouletteResult;
        console.log('üéØ Num√©ro tir√©:', result.number, result.color);
        
        return result;
    } catch (error) {
        console.error('‚ùå Erreur lors du spin:', error);
        throw error;
    }
  }

  /**
   * CALCUL DES GAINS ET SYNCHRONISATION AVEC LE BACKEND
   * 
   * Cette m√©thode centralise le calcul des gains apr√®s un spin de roulette.
   * Elle utilise l'architecture anti-double-d√©bit pour maintenir la coh√©rence du solde.
   * 
   * ARCHITECTURE ANTI-DOUBLE-D√âBIT :
   * Le probl√®me : Le solde a d√©j√† √©t√© d√©bit√© visuellement dans setBet() pour l'UX imm√©diate.
   * La solution : Envoie _originalSolde (non modifi√©) au backend pour les calculs.
   * R√©sultat : Pas de double d√©bit, calculs justes, interface r√©active.
   * 
   * FLUX DE DONN√âES :
   * 1. Envoi du solde original (non d√©bit√©) au backend
   * 2. Backend calcule gains/pertes sur le solde r√©el
   * 3. Backend retourne le nouveau solde apr√®s calculs
   * 4. Frontend synchronise les deux valeurs de solde
   * 
   * AVANTAGES DE CETTE APPROCHE :
   * - UX imm√©diate (d√©bit visuel instantan√©)
   * - S√©curit√© maximale (calculs serveur)
   * - Pas de d√©synchronisation possible
   * - √âvite le double d√©bit du solde
   * - Calculs centralis√©s et s√©curis√©s c√¥t√© serveur
   * - Synchronisation garantie avec la base de donn√©es
   * - Gestion d'erreur robuste avec rollback automatique
   * 
   * @param winningSpin Num√©ro gagnant du spin (0-36)
   * @param gameSessionId ID de la session de jeu pour tra√ßabilit√©
   * @returns Promise avec winValue, payout, newsolde, betTotal
   */
  async win(winningSpin: number, gameSessionId?: string): Promise<{ winValue: number; payout: number; newsolde: number; betTotal: number }> {
    if (!this.currentUser) {
      throw new Error('Utilisateur non connect√©');
    }
    
    try {
      console.log('üí∞ Calcul des gains pour le num√©ro:', winningSpin);
      console.log('üìä Solde original envoy√© au backend:', this._originalSolde);
      console.log('üéØ Nombre de mises √† traiter:', this.bet.length);
      console.log('üéÆ Session de jeu:', gameSessionId);
      
      const response = await firstValueFrom(this.http.post<{ 
        winValue: number; 
        payout: number;
        newsolde: number;
        betTotal: number;
      }>(
        `${this.BASE_URL}/api/roulette/win`, 
        { 
          winningSpin, 
          bets: this.bet,
          solde: this._originalSolde,  // CRUCIAL : solde r√©el non d√©bit√©
          userId: this.currentUser.user_id,
          gameSessionId: gameSessionId || `RO-${Date.now()}-${this.currentUser.user_id}`
        }
      ));
      
      if (response) {
        // S√©curisation des valeurs re√ßues avec fallbacks
        const safeWinValue = response.winValue ?? 0;
        const safePayout = response.payout ?? 0;
        const safeBetTotal = response.betTotal ?? 0;
        const safeNewsolde = response.newsolde ?? this.currentUser.solde;
        
        console.log('‚úÖ R√©sultat du backend:', {
          winValue: safeWinValue,
          payout: safePayout,
          newsolde: safeNewsolde,
          betTotal: safeBetTotal
        });
        
        // SYNCHRONISATION CRUCIALE : mise √† jour des deux soldes
        this.currentUser.solde = safeNewsolde;      // Solde affich√©
        this._originalSolde = this.currentUser.solde; // Solde de r√©f√©rence
        
        return { 
          winValue: safeWinValue, 
          payout: safePayout,
          newsolde: safeNewsolde,
          betTotal: safeBetTotal
        };
      }
      
      throw new Error('R√©ponse invalide du serveur');
    } catch (error) {
      console.error('‚ùå Erreur calcul gains:', error);
      throw error;
    }
  }

  // ===== M√âTHODES UTILITAIRES POUR L'AFFICHAGE ET LA LOGIQUE =====

  /** 
   * D√âTERMINATION DE LA COULEUR D'UN NUM√âRO
   * 
   * Applique les r√®gles standard de la roulette europ√©enne pour d√©terminer la couleur.
   * Cette m√©thode est utilis√©e pour l'affichage et la validation des paris couleur.
   * 
   * R√àGLES DE LA ROULETTE EUROP√âENNE :
   * - 0 : Vert (case sp√©ciale de la banque)
   * - Num√©ros dans numRed : Rouge
   * - Tous les autres num√©ros : Noir
   * 
   * @param number Num√©ro de la roulette (0-36)
   * @returns 'green' | 'red' | 'black'
   */
  getNumberColor(number: number): 'red' | 'black' | 'green' {
    if (number === 0) return 'green';
    return this.numRed.includes(number) ? 'red' : 'black';
  }

  /** 
   * ORDRE DES NUM√âROS SUR LA ROUE PHYSIQUE
   * 
   * Retourne la disposition exacte des num√©ros sur une roulette europ√©enne r√©elle.
   * Utilis√© pour l'animation r√©aliste de la bille et le calcul des angles.
   * 
   * @returns Tableau des 37 num√©ros dans l'ordre physique de la roue
   */
  getWheelNumbers(): number[] {
    return this.wheelnumbersAC;
  }

  /** 
   * COULEUR CSS POUR L'AFFICHAGE D'UNE SECTION
   * 
   * Convertit la couleur logique d'un num√©ro en couleur CSS pour l'affichage.
   * Utilis√© pour colorier les sections de la roue dans le template.
   * 
   * MAPPING DES COULEURS :
   * - 0 : Vert casino (#016D29)
   * - Num√©ros rouges : Rouge roulette (#E0080B)
   * - Num√©ros noirs : Noir (#000)
   * 
   * @param number Num√©ro de la roulette (0-36)
   * @returns Code couleur CSS hexad√©cimal
   */
  getSectionColor(number: number): string {
    if (number === 0) return '#016D29'; // Vert casino traditionnel
    if (this.numRed.includes(number)) return '#E0080B'; // Rouge roulette
    return '#000'; // Noir
  }

  /** 
   * RECHERCHE D'UNE MISE ASSOCI√âE √Ä UNE CELLULE
   * 
   * Trouve la mise correspondante √† une cellule du plateau pour l'affichage des jetons.
   * Utilis√© par le template pour afficher visuellement les mises plac√©es.
   * 
   * LOGIQUE DE CORRESPONDANCE :
   * - Compare les num√©ros couverts (numbers) et le type de mise
   * - Retourne la premi√®re mise correspondante trouv√©e
   * - Null si aucune mise sur cette cellule
   * 
   * @param cell Cellule du plateau de mise
   * @returns Objet mise correspondant ou null
   */
  getBetForCell(cell: IBettingBoardCell) {
    if (!cell?.numbers) return null;
    const numbers = cell.numbers.join(', ');
    const type = cell.type;
    return this.bet.find(b => b.numbers === numbers && b.type === type) || null;
  }

  /** 
   * CLASSE CSS POUR LA COULEUR DES JETONS
   * 
   * D√©termine la classe CSS √† appliquer selon le montant de la mise.
   * Permet un affichage visuel coh√©rent et une identification rapide des montants.
   * 
   * √âCHELLE DES COULEURS :
   * - < 5 : Rouge (petites mises)
   * - < 10 : Bleu (mises moyennes)
   * - < 100 : Orange (grosses mises)
   * - >= 100 : Or (tr√®s grosses mises)
   * 
   * @param amount Montant de la mise
   * @returns Nom de la classe CSS correspondante
   */
  getChipColorClass(amount: number): string {
    if (amount < 5) return 'red';
    if (amount < 10) return 'blue';
    if (amount < 100) return 'orange';
    return 'gold';
  }
  
  /** 
   * ACCESSEUR POUR LES DONN√âES UTILISATEUR
   * 
   * M√©thode d'acc√®s publique aux donn√©es de l'utilisateur connect√©.
   * Utilis√©e par les composants externes qui ont besoin des informations utilisateur.
   * 
   * @returns Donn√©es utilisateur ou undefined si non connect√©
   */
  getCurrentIUser(): IUser | undefined {
    return this.currentUser;
  }

  /**
   * ENREGISTREMENT D'UNE NOUVELLE MISE SUR LE PLATEAU
   * 
   * M√©thode centrale pour placer une mise sur une cellule du plateau.
   * G√®re le d√©bit visuel du solde et l'ajout de la mise au tableau des mises actives.
   * 
   * PROCESSUS D'ENREGISTREMENT :
   * 1. Validation de l'utilisateur et de la cellule
   * 2. Ajustement du montant selon le solde disponible
   * 3. D√©bit visuel du solde (UX imm√©diate)
   * 4. Ajout ou mise √† jour de la mise dans le tableau
   * 5. Mise √† jour de la liste des num√©ros mis√©s
   * 
   * GESTION DU SOLDE :
   * - D√©bite visuellement currentUser.solde pour l'UX
   * - Conserve _originalSolde intact pour les calculs backend
   * - Limite automatiquement la mise au solde disponible
   * 
   * GESTION DES MISES MULTIPLES :
   * - Si une mise existe d√©j√† sur la cellule : additionne les montants
   * - Sinon : cr√©e une nouvelle entr√©e dans le tableau des mises
   * 
   * @param cell Cellule du plateau sur laquelle placer la mise
   */
  setBet(cell: IBettingBoardCell) {
    if (!this.currentUser || !cell?.numbers) return;
    
    // Sauvegarde de la mise pr√©c√©dente pour l'historique
    this.lastWager = this.wager;
    
    // Limitation de la mise au solde disponible (s√©curit√©)
    this.wager = Math.min(this.wager, this.currentUser.solde);

    if (this.wager > 0) {
      // D√âBIT VISUEL IMM√âDIAT pour l'exp√©rience utilisateur
      this.currentUser.solde -= this.wager;
      this.currentBet += this.wager; 
      
      // Pr√©paration des donn√©es de la mise
      const numbers = cell.numbers.join(', ');
      const type = cell.type;
      const odds = cell.odds; 
      const label = cell.label;
      
      // Recherche d'une mise existante sur cette cellule
      let existingBet = this.bet.find(b => b.numbers === numbers && b.type === type);
      if (existingBet) {
        // Mise existante : additionner les montants
        existingBet.amt += this.wager;
        console.log(`‚ûï Mise augment√©e sur ${label || numbers}: +${this.wager} (total: ${existingBet.amt})`);
      } else {
        // Nouvelle mise : cr√©er une entr√©e
        this.bet.push({ label, numbers, type, odds, amt: this.wager });
        console.log(`üÜï Nouvelle mise sur ${label || numbers}: ${this.wager} (cote: ${odds}:1)`);
      }
      
      // Mise √† jour de la liste des num√©ros mis√©s (pour l'affichage)
      for (let num of cell.numbers) {
        if (!this.numbersBet.includes(num)) {
          this.numbersBet.push(num);
        }
      }
      
      console.log(`üí∞ Solde apr√®s mise: ${this.currentUser.solde}, Total mis√©: ${this.currentBet}`);
    } else {
      console.warn('‚ö†Ô∏è Impossible de miser: solde insuffisant');
    }
  }

  /**
   * GESTION DE LA S√âLECTION DES JETONS ET ACTIONS SP√âCIALES
   * 
   * G√®re la s√©lection des jetons et l'action sp√©ciale "clear bet".
   * Cette m√©thode centralise la logique de changement de jeton et de nettoyage.
   * 
   * FONCTIONNALIT√âS :
   * - S√©lection d'un jeton avec valeur pr√©d√©finie (1, 5, 10, 100)
   * - Action "clear bet" : efface toutes les mises et recr√©dite le solde
   * - Validation de l'√©tat du jeu (bloqu√© pendant le spin)
   * 
   * LOGIQUE "CLEAR BET" :
   * 1. Recr√©dite visuellement toutes les mises au solde
   * 2. Remet currentBet √† z√©ro
   * 3. Vide le tableau des mises
   * 
   * @param index Index du jeton s√©lectionn√© (dernier index = clear bet)
   * @returns true si l'action a √©t√© effectu√©e, false si bloqu√©e
   */
  selectChip(index: number): boolean {
    if (this.isSpinning) return false; // S√©curit√© : pas d'action pendant le spin
    
    if (index === this.chipValues.length - 1) {
        // Action "clear bet" : recr√©diter toutes les mises
        if (this.currentUser) {
            this.currentUser.solde += this.currentBet;
            console.log(`üßπ Clear bet: ${this.currentBet} recr√©dit√©, nouveau solde: ${this.currentUser.solde}`);
        }
        this.currentBet = 0; 
        this.clearBet();
    } else {
        // S√©lection d'un jeton avec valeur pr√©d√©finie
        this.selectedChipIndex = index; 
        this.wager = [1, 5, 10, 100][index] || 100;
        console.log(`üéØ Jeton s√©lectionn√©: ${this.wager} (index: ${index})`);
    }
    
    return true;
  }
} 