import { Injectable, inject } from '@angular/core';
import { IBettingBoardCell } from '../../interfaces/betting-board.interface';
import { IUser } from '../../interfaces/users.interface';
import { IRouletteResult } from '../../interfaces/roulette-net-resultat.interface';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';

/**
 * Service de logique m√©tier pour le jeu de roulette en ligne.
 * G√®re toutes les op√©rations de mise, calcul des gains et communication avec l'API backend.
 * 
 * ARCHITECTURE AVEC LE COMPOSANT :
 * - Ce service contient toute la logique m√©tier et les donn√©es d'√©tat du jeu
 * - Le composant acc√®de aux donn√©es via des getters qui d√©l√®guent √† ce service
 * - Pattern : S√©paration claire entre logique m√©tier (service) et pr√©sentation (composant)
 * - Avantage : Testabilit√©, r√©utilisabilit√© et maintenance facilit√©es
 */
@Injectable({ providedIn: 'root' })
export class RouletteNetLogic {
  private http = inject(HttpClient);
  private BASE_URL = 'http://localhost:3000';
  
  // ===== PROPRI√âT√âS PRIV√âES ENCAPSUL√âES =====
  private _currentUser?: IUser;
  private _isSpinning = false;
  private _currentBet = 0;
  private _wager = 5;
  private _selectedChipIndex = 1;
  
  // ===== GETTERS/SETTERS ES6 POUR L'ENCAPSULATION =====
  
  /**
   * Getter/Setter pour l'utilisateur connect√© avec validation.
   * Centralise l'acc√®s aux donn√©es utilisateur depuis le composant.
   */
  get currentUser(): IUser | undefined {
    return this._currentUser;
  }
  
  set currentUser(user: IUser | undefined) {
    this._currentUser = user;
  }
  
  /**
   * Getter/Setter pour l'√©tat de rotation avec contr√¥le d'acc√®s.
   * Emp√™che les modifications non autoris√©es de l'√©tat de jeu.
   */
  get isSpinning(): boolean {
    return this._isSpinning;
  }
  
  set isSpinning(value: boolean) {
    this._isSpinning = value;
  }
  
  /**
   * Getter/Setter pour la mise actuelle avec validation des montants.
   * Garantit que les montants sont toujours positifs et coh√©rents.
   */
  get currentBet(): number {
    return this._currentBet;
  }
  
  set currentBet(value: number) {
    this._currentBet = Math.max(0, value); // Protection contre les valeurs n√©gatives
  }
  
  /**
   * Getter/Setter pour la valeur de mise avec validation.
   * Assure que la mise respecte les limites du jeu.
   */
  get wager(): number {
    return this._wager;
  }
  
  set wager(value: number) {
    this._wager = Math.max(1, value); // Mise minimum de 1
  }
  
  /**
   * Getter/Setter pour l'index du jeton s√©lectionn√© avec validation.
   * Contr√¥le la s√©lection des jetons disponibles.
   */
  get selectedChipIndex(): number {
    return this._selectedChipIndex;
  }
  
  set selectedChipIndex(index: number) {
    if (index >= 0 && index < this.chipValues.length) {
      this._selectedChipIndex = index;
    }
  }
  
  // Configuration des jetons de mise avec leurs valeurs et couleurs associ√©es
  // Le syst√®me permet de miser avec diff√©rentes valeurs pr√©d√©finies
  chipValues = [1, 5, 10, 100, 'clear'];
  chipColors = ['red', 'blue', 'orange', 'gold', 'clearBet'];
  lastWager = 0;

  // Tableaux de stockage des mises et des r√©sultats
  // Ils permettent de g√©rer l'historique et l'√©tat des paris en cours
  bet: { label: string; numbers: string; type: string; odds: number; amt: number }[] = [];
  numbersBet: number[] = [];
  previousNumbers: number[] = [];

  // Configuration de la roulette europ√©enne avec num√©ros rouges et disposition de la roue
  // Ces constantes d√©finissent les r√®gles et l'apparence du jeu de roulette
  numRed = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
  wheelnumbersAC = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34,
    6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 
    1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];

  constructor() {
    // R√©cup√©ration automatique des donn√©es utilisateur au d√©marrage du service
    // Cette initialisation garantit que l'utilisateur connect√© est identifi√© d√®s le chargement
    this.fetchIUser();
    
    // Initialisation des valeurs par d√©faut via les setters pour validation
    this.selectedChipIndex = 1; // Par d√©faut, jeton de 5 actif
    this.wager = 5;
    this.currentBet = 0;
    this.isSpinning = false;
  }

  /**
   * R√©cup√®re les informations de l'utilisateur connect√© depuis l'API.
   * Les console.log permettent de tracer les appels API et diagnostiquer les probl√®mes de connexion.
   */
  fetchIUser() {
    console.log('üîÑ R√©cup√©ration des donn√©es utilisateur depuis l\'API...');
    this.http.get<IUser>(`${this.BASE_URL}/get_id/info`, { withCredentials: true })
      .subscribe({
        next: (userData) => {
          this.currentUser = userData; 
          console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es:', this.currentUser);
          console.log('üí∞ Solde r√©cup√©r√© depuis l\'API:', this.currentUser?.solde);
          
          // Si l'utilisateur a un solde, on peut l'utiliser comme valeur initiale de la banque
        },
        error: (error) => {
          console.error('‚ùå Erreur lors de la r√©cup√©ration des informations utilisateur:', error);
          
        }
      });
  }

  /**
   * Remet √† z√©ro toutes les variables de jeu pour une nouvelle partie.
   * Cette m√©thode nettoie l'√©tat du jeu tout en conservant les donn√©es utilisateur.
   */
  resetGame() {
    this.currentBet = 0; 
    this.wager = 5;      
    this.bet = [];
    this.numbersBet = [];
    this.previousNumbers = [];
  }

  /**
   * Efface toutes les mises en cours sans affecter le solde.
   * Utilis√©e pour annuler les paris avant le lancement de la roulette.
   */
  clearBet() {
    this.bet = [];
    this.numbersBet = [];
  }

  /**
   * Supprime une mise sp√©cifique et recr√©dite le montant au solde affich√©.
   * Cette op√©ration est locale (pas de base de donn√©es) pour l'affichage temps r√©el.
   */
  removeBet(cell: IBettingBoardCell) {
    if (!this.currentUser) return; // V√©rification de s√©curit√©
    if (!cell || !cell.numbers) return; // V√©rification de s√©curit√© pour cell
    
    this.wager = (this.wager === 0) ? 100 : this.wager; 
    const n = cell.numbers.join(', ');
    const t = cell.type;
    for (let b of this.bet) {
      if (b.numbers === n && b.type === t) {
        if (b.amt !== 0) {
          this.wager = (b.amt > this.wager) ? this.wager : b.amt; 
          b.amt -= this.wager;
          // Cr√©diter localement pour l'affichage en temps r√©el (sans toucher la base de donn√©es)
          if (this.currentUser) {
            this.currentUser.solde += this.wager;
          }
          this.currentBet -= this.wager; 
        }
      }
    }
    // Nettoyer les bets √† 0
    this.bet = this.bet.filter(b => b.amt > 0);
  }

  /**
   * Lance la roulette et retourne un num√©ro al√©atoire via l'API.
   * L'appel API garantit que le r√©sultat est g√©n√©r√© c√¥t√© serveur pour √©viter la triche.
   */
  async spin(): Promise<IRouletteResult> {
    try {
        // Si l'utilisateur est connect√©, on peut envoyer son ID avec la requ√™te
        const userId = this.currentUser?.user_id;
        
        const response = await fetch('/api/roulette/spin', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId: userId }), // Envoyer l'ID de l'utilisateur si disponible
        });

        if (!response.ok) {
            throw new Error('Failed √† spin the roulette');
        }

        const result = await response.json();
        return result as IRouletteResult;
    } catch (error) {
        console.error('Error spinning the roulette:', error);
        throw error;
    }
  }

  /**
   * Calcule les gains/pertes d'un spin en r√©cup√©rant d'abord le solde r√©el de la base de donn√©es.
   * Les console.log tracent le processus de r√©cup√©ration du solde pour diagnostiquer les incoh√©rences.
   */
  async win(winningSpin: number): Promise<{ winValue: number; payout: number; newsolde: number; betTotal: number }> {
    if (!this.currentUser) {
      throw new Error('Utilisateur non connect√©');
    }
    
    try {
      // R√©cup√©ration du solde r√©el depuis la base de donn√©es pour √©viter les d√©synchronisations
      // Cette √©tape garantit que les calculs se basent sur la valeur la plus r√©cente en base
      console.log('üí∞ R√©cup√©ration du solde r√©el depuis la base de donn√©es...');
      const userData = await firstValueFrom(this.http.get<IUser>(`${this.BASE_URL}/get_id/info`, { withCredentials: true }));
      const soldeReel = userData.solde;
      console.log(`üí∞ Solde r√©el r√©cup√©r√©: ${soldeReel}`);
      
      // Appel de l'API win du backend avec le vrai solde de la base de donn√©es
      const response = await firstValueFrom(this.http.post<{ 
        winValue: number; 
        payout: number;
        newsolde: number;
        betTotal: number;
      }>(
        `${this.BASE_URL}/api/roulette/win`, 
        { 
          winningSpin, 
          bets: this.bet,
          solde: soldeReel,  // Utiliser le solde r√©el de la base de donn√©es
          userId: this.currentUser.user_id
        }
      ));
      
      if (response) {
        // Protection contre les valeurs nulles retourn√©es par l'API
        // Ces v√©rifications assurent la robustesse en cas de r√©ponse incompl√®te du serveur
        const safeWinValue = response.winValue !== null ? response.winValue : 0;
        const safePayout = response.payout !== null ? response.payout : 0;
        const safeBetTotal = response.betTotal !== null ? response.betTotal : 0;
        const safeNewsolde = response.newsolde !== null ? response.newsolde : this.currentUser.solde;
        
        // Mise √† jour du solde local avec la valeur calcul√©e par le backend
        // Le console.log confirme que la mise √† jour a eu lieu c√¥t√© frontend
        if (this.currentUser) {
          this.currentUser.solde = safeNewsolde;
        }
        console.log(`üí∞ Solde frontend mis √† jour: ${safeNewsolde}`);
        
        // Actualisation des donn√©es utilisateur pour garantir la coh√©rence avec la base
        // Cette double v√©rification s'assure que frontend et backend restent synchronis√©s
        this.fetchIUser();
        
        return { 
          winValue: safeWinValue, 
          payout: safePayout,
          newsolde: safeNewsolde,
          betTotal: safeBetTotal
        };
      }
      
      throw new Error('√âchec du calcul des gains');
    } catch (error) {
      console.error('Erreur lors du calcul des gains:', error);
      throw error;
    }
  }

  // ===== M√âTHODES D'ACC√àS ET UTILITAIRES =====
  // Ces m√©thodes pr√©fix√©es "get" ne sont PAS des getters ES6 mais des m√©thodes classiques
  // Diff√©rence avec les getters du composant : ces m√©thodes effectuent des calculs ou transformations
  // Les getters du composant d√©l√®guent simplement l'acc√®s aux propri√©t√©s de ce service

  /**
   * D√©termine la couleur d'un num√©ro selon les r√®gles de la roulette europ√©enne.
   * Le z√©ro est vert, les autres num√©ros sont rouges ou noirs selon la configuration.
   */
  getNumberColor(number: number): 'red' | 'black' | 'green' {
    if (number === 0) return 'green';
    return this.numRed.includes(number) ? 'red' : 'black';
  }

  /**
   * Retourne la disposition physique des num√©ros sur la roue de roulette.
   * Cette configuration respecte l'ordre standard de la roulette europ√©enne.
   */
  getWheelNumbers(): number[] {
    return this.wheelnumbersAC;
  }

  /**
   * G√©n√®re la couleur de fond CSS pour l'affichage des sections de la roue.
   * Les couleurs respectent le code traditionnel : vert pour 0, rouge et noir pour les autres.
   */
  getSectionColor(number: number): string {
    if (number === 0) return '#016D29'; // vert
    if (this.numRed.includes(number)) return '#E0080B'; // rouge
    return '#000'; // noir
  }

  /**
   * Recherche et retourne la mise associ√©e √† une cellule du plateau de jeu.
   * Cette m√©thode permet d'afficher les jetons plac√©s sur chaque case du tapis.
   */
  getBetForCell(cell: IBettingBoardCell) {
    if (!cell || !cell.numbers) return null; // V√©rification de s√©curit√©
    const n = cell.numbers.join(', ');
    const t = cell.type;
    return this.bet.find(b => b.numbers === n && b.type === t) || null;
  }

  /**
   * D√©termine la classe CSS du jeton selon le montant mis√©.
   * Le syst√®me de couleurs aide √† identifier rapidement les montants des mises.
   */
  getChipColorClass(amount: number): string {
    if (amount < 5) return 'red';
    if (amount < 10) return 'blue';
    if (amount < 100) return 'orange';
    return 'gold';
  }
  
  /**
   * Accesseur pour r√©cup√©rer les donn√©es de l'utilisateur actuellement connect√©.
   * Cette m√©thode centralise l'acc√®s aux informations utilisateur pour le composant.
   */
  getCurrentIUser(): IUser | undefined {
    return this.currentUser;
  }

  /**
   * Enregistre une nouvelle mise sur une cellule du plateau de jeu.
   * La mise est d√©bit√©e localement pour l'affichage imm√©diat, la vraie d√©duction se fait via l'API.
   */
  setBet(cell: IBettingBoardCell) {
    if (!this.currentUser) return; // V√©rification de s√©curit√©
    if (!cell || !cell.numbers) return; // V√©rification de s√©curit√© pour cell
    
    this.lastWager = this.wager;
    this.wager = (this.currentUser.solde < this.wager) ? this.currentUser.solde : this.wager;

    if (this.wager > 0) {
      // D√©bit local pour l'affichage temps r√©el (la vraie d√©duction se fait via l'API backend)
      // Cette approche am√©liore l'exp√©rience utilisateur en montrant imm√©diatement l'effet de la mise
      if (this.currentUser) {
        this.currentUser.solde -= this.wager;
      }
      this.currentBet += this.wager; 
      
      // V√©rification et mise √† jour des mises existantes ou cr√©ation d'une nouvelle mise
      // Le syst√®me accumule les mises multiples sur la m√™me cellule
      const n = cell.numbers.join(', ');
      const t = cell.type;
      const o = cell.odds; 
      const l = cell.label;
      let found = false;
      for (let b of this.bet) {
        if (b.numbers === n && b.type === t) {
          b.amt += this.wager;
          found = true;
          break;
        }
      }
      if (!found) {
        this.bet.push({ label: l, numbers: n, type: t, odds: o, amt: this.wager });
      }
      // Tracking des num√©ros mis√©s pour l'affichage visuel
      // Cette liste aide √† mettre en √©vidence les cases avec des mises actives
      for (let num of cell.numbers) {
        if (!this.numbersBet.includes(num)) {
          this.numbersBet.push(num);
        }
      }
    }
  }

  /**
   * G√®re la s√©lection des jetons et l'action de nettoyage des mises.
   * Le syst√®me emp√™che les modifications pendant la rotation de la roulette pour la coh√©rence du jeu.
   */
  selectChip(index: number): boolean {
    if (this.isSpinning) return false; // Emp√™cher la s√©lection de puce pendant la rotation
    
    if (index === this.chipValues.length - 1) {
        // Action "clear bet" qui remet le solde affich√© √† l'√©tat initial
        // Cette fonctionnalit√© permet d'annuler toutes les mises d'un coup
        if (this.currentUser && this.currentUser.solde !== undefined) {
            this.currentUser.solde += this.currentBet;  // Remettre les mises dans le solde affich√©
        }
        this.currentBet = 0; 
        this.clearBet();
    } else {
        // S√©lection d'une valeur de jeton sp√©cifique pour les prochaines mises
        // Les valeurs sont pr√©d√©finies pour correspondre aux jetons standards du casino
        this.selectedChipIndex = index; 
        this.wager = index === 0 ? 1 : index === 1 ? 5 : index === 2 ? 10 : 100; 
    }
    
    return true;
  }
} 